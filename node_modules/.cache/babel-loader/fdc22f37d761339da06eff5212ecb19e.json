{"ast":null,"code":"class City {\n  constructor(key, name, latitude, longitude, population) {\n    this.key = key;\n    this.name = name;\n    this.latitude = Number(latitude);\n    this.longitude = Number(longitude);\n    this.population = Number(population);\n  }\n\n  show() {\n    return `${this.name} is located at lat ${this.latitude}\n    long ${this.longitude} and it has a population of ${this.population}`;\n  }\n\n  movedIn(number) {\n    this.population += number;\n  }\n\n  movedOut(number) {\n    this.population -= number;\n  }\n\n  howBig(population) {\n    if (this.population > 100000) {\n      return \"City\";\n    }\n\n    if (this.population >= 20000) {\n      return \"Large town\";\n    }\n\n    if (this.population >= 1000) {\n      return \"Town\";\n    }\n\n    if (this.population > 100) {\n      return \"Village\";\n    }\n\n    if (this.population >= 1) {\n      return \"Hamlet\";\n    }\n  }\n\n}\n\nclass Community {\n  constructor() {\n    this.cities = [];\n  }\n\n  createCity(key, name, latitude, longitude, population) {\n    const city = new City(key, name, latitude, longitude, population);\n    this.cities.push(city);\n    return city;\n  }\n\n  deleteCity(key) {\n    const citiesArr = this.cities.filter(city => city.key !== key);\n    this.cities = citiesArr;\n  }\n\n  whichSphere(latitude) {\n    if (latitude > 0) {\n      return \"Northern Hemisphere\";\n    } else {\n      return \"Southern Hemisphere\";\n    }\n  }\n\n  getMostNorthern() {\n    return this.cities.slice().sort((a, b) => b.latitude - a.latitude)[0];\n  }\n\n  getMostSouthern() {\n    return this.cities.sort((a, b) => a.latitude - b.latitude)[0];\n  }\n\n  getPopulation() {\n    return this.cities.reduce((acc, cur) => acc + cur.population, 0);\n  }\n\n}\n\nexport { City, Community };","map":{"version":3,"sources":["C:/code/cohort3/react-03/react-03/src/components/cities/citiesPSC.js"],"names":["City","constructor","key","name","latitude","longitude","population","Number","show","movedIn","number","movedOut","howBig","Community","cities","createCity","city","push","deleteCity","citiesArr","filter","whichSphere","getMostNorthern","slice","sort","a","b","getMostSouthern","getPopulation","reduce","acc","cur"],"mappings":"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","sourcesContent":["class City {\r\n  constructor(key, name, latitude, longitude, population) {\r\n    this.key = key;\r\n    this.name = name;\r\n    this.latitude = Number(latitude);\r\n    this.longitude = Number(longitude);\r\n    this.population = Number(population);\r\n  }\r\n\r\n  show() {\r\n    return `${this.name} is located at lat ${this.latitude}\r\n    long ${this.longitude} and it has a population of ${this.population}`;\r\n  }\r\n\r\n  movedIn(number) {\r\n    this.population += number;\r\n  }\r\n\r\n  movedOut(number) {\r\n    this.population -= number;\r\n  }\r\n\r\n  howBig(population) {\r\n    if (this.population > 100000) {\r\n      return \"City\";\r\n    }\r\n    if (this.population >= 20000) {\r\n      return \"Large town\";\r\n    }\r\n    if (this.population >= 1000) {\r\n      return \"Town\";\r\n    }\r\n    if (this.population > 100) {\r\n      return \"Village\";\r\n    }\r\n    if (this.population >= 1) {\r\n      return \"Hamlet\";\r\n    }\r\n  }\r\n}\r\n\r\nclass Community {\r\n  constructor() {\r\n    this.cities = [];\r\n  }\r\n\r\n  createCity(key, name, latitude, longitude, population) {\r\n    const city = new City(key, name, latitude, longitude, population);\r\n    this.cities.push(city);\r\n    return city;\r\n  }\r\n\r\n  deleteCity(key) {\r\n    const citiesArr = this.cities.filter(city => city.key !== key);\r\n    this.cities = citiesArr;\r\n  }\r\n\r\n  whichSphere(latitude) {\r\n    if (latitude > 0) {\r\n      return \"Northern Hemisphere\";\r\n    } else {\r\n      return \"Southern Hemisphere\";\r\n    }\r\n  }\r\n\r\n  getMostNorthern() {\r\n    return this.cities.slice().sort((a, b) => b.latitude - a.latitude)[0];\r\n  }\r\n\r\n  getMostSouthern() {\r\n    return this.cities.sort((a, b) => a.latitude - b.latitude)[0];\r\n  }\r\n\r\n  getPopulation() {\r\n    return this.cities.reduce((acc, cur) => acc + cur.population, 0);\r\n  }\r\n}\r\n\r\nexport { City, Community };\r\n"]},"metadata":{},"sourceType":"module"}