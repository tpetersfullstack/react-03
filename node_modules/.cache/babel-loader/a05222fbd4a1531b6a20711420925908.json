{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\cohort3\\\\react-03\\\\react-03\\\\src\\\\components\\\\cities\\\\cities.js\";\nimport React, { Component } from \"react\";\nimport \"./cities.css\";\nimport { Community } from \"./citiesPSC.js\";\nimport CitiesCard from \"./citiesCard.js\";\nimport fetch_function from \"./fetch.js\";\n\nclass Cities extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleCreateNewCity = () => {\n      this.key += 1;\n      const newCity = this.citiesManager.createCity(this.key, this.state.nameInput, this.state.latitude, this.state.longitude, this.state.population);\n      fetch_function.addCity(newCity);\n      this.calculate();\n      this.setState({\n        nameInput: \"\",\n        latitude: \"\",\n        longitude: \"\",\n        population: \"\"\n      });\n      console.log(this.citiesManager);\n    };\n\n    this.handleDelete = currentKey => {\n      console.log(\"In handle Delete\");\n      this.citiesManager.deleteCity(currentKey);\n      console.log(this.citiesManager.cities);\n      this.calculate();\n      this.setState({\n        nameInput: \"\",\n        latitude: \"\",\n        longitude: \"\",\n        population: \"\"\n      });\n    };\n\n    this.calculate = () => {\n      //New's said fix this!!! add if statement to check if x is undefine. If not (has data), do the setsate\n      console.log(this.citiesManager);\n      let x = this.citiesManager.getMostNorthern();\n      console.log(x); // this.setState({\n      //   whichSphere: this.citiesManager.whichSphere(this.state.latitude),\n      //   northernMost: this.citiesManager.getMostNorthern().latitude,\n      //   southernMost: this.citiesManager.getMostSouthern().latitude,\n      //   totalPopulation: this.citiesManager.getPopulation(),\n      // })\n      // console.log(this.citiesManager.whichSphere());\n    };\n\n    this.renderCards = () => {\n      return this.citiesManager.cities.map(cityEach => {\n        console.log(cityEach.key);\n        return /*#__PURE__*/React.createElement(CitiesCard, {\n          key: cityEach.key // key={cityEach.name}\n          ,\n          city: cityEach,\n          calculate: this.calculate,\n          removeCity: this.handleDelete,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.state = {\n      nameInput: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      population: \"\",\n      northernMost: \"\",\n      southernMost: \"\",\n      totalPopulation: \"\"\n    };\n    this.key = 0;\n    this.citiesManager = new Community();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \" My Cities \"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"idPanelContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"idLeftPanel\",\n      className: \"leftPanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"Cities Manager\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"input1\",\n      type: \"text\",\n      placeholder: \"Add a City Name\",\n      name: \"nameInput\",\n      value: this.state.nameInput,\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"input2\",\n      type: \"number\",\n      placeholder: \"Add latitude\",\n      name: \"latitude\",\n      value: this.state.latitude,\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"input3\",\n      type: \"number\",\n      placeholder: \"Add longitude\",\n      name: \"longitude\",\n      value: this.state.longitude,\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"input4\",\n      type: \"number\",\n      placeholder: \"Add population\",\n      name: \"population\",\n      value: this.state.population,\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"addBalance\",\n      id: \"idAddBalance\",\n      onClick: this.handleCreateNewCity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, \"Create New City\"), this.renderCards()), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"idRightPanel\",\n      className: \"rightPanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \" \", \"City Statistics\", /*#__PURE__*/React.createElement(\"h3\", {\n      id: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, \"Which sphere is the city in? : \", this.state.whichSphere), /*#__PURE__*/React.createElement(\"h3\", {\n      id: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, \"The northern most city is: \", this.state.northernMost), /*#__PURE__*/React.createElement(\"h3\", {\n      id: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, \"The southern most city is: \", this.state.southernMost), /*#__PURE__*/React.createElement(\"h3\", {\n      id: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, \"The total population of all cities is:\", \" \", this.state.totalPopulation))));\n  }\n\n}\n\nexport default Cities;","map":{"version":3,"sources":["C:/code/cohort3/react-03/react-03/src/components/cities/cities.js"],"names":["React","Component","Community","CitiesCard","fetch_function","Cities","constructor","handleInputChange","event","setState","target","name","value","handleCreateNewCity","key","newCity","citiesManager","createCity","state","nameInput","latitude","longitude","population","addCity","calculate","console","log","handleDelete","currentKey","deleteCity","cities","x","getMostNorthern","renderCards","map","cityEach","northernMost","southernMost","totalPopulation","render","whichSphere"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./cities.css\";\r\nimport { Community } from \"./citiesPSC.js\";\r\nimport CitiesCard from \"./citiesCard.js\";\r\nimport fetch_function from \"./fetch.js\";\r\n\r\nclass Cities extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      nameInput: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n      population: \"\",\r\n      northernMost: \"\",\r\n      southernMost: \"\",\r\n      totalPopulation: \"\"\r\n    };\r\n    this.key = 0;\r\n    this.citiesManager = new Community();\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleCreateNewCity = () => {\r\n    this.key += 1;\r\n    const newCity = this.citiesManager.createCity(\r\n      this.key,\r\n      this.state.nameInput,\r\n      this.state.latitude,\r\n      this.state.longitude,\r\n      this.state.population\r\n    );\r\n    fetch_function.addCity(newCity);\r\n    this.calculate();\r\n\r\n    this.setState({\r\n      nameInput: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n      population: \"\"\r\n    });\r\n\r\n    console.log(this.citiesManager);\r\n  };\r\n\r\n  handleDelete = currentKey => {\r\n    console.log(\"In handle Delete\");\r\n    this.citiesManager.deleteCity(currentKey);\r\n    console.log(this.citiesManager.cities);\r\n    this.calculate();\r\n    this.setState({\r\n      nameInput: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n      population: \"\"\r\n    });\r\n  };\r\n\r\n  calculate = () => {\r\n    //New's said fix this!!! add if statement to check if x is undefine. If not (has data), do the setsate\r\n    console.log(this.citiesManager);\r\n    let x = this.citiesManager.getMostNorthern();\r\n    console.log(x);\r\n    // this.setState({\r\n    //   whichSphere: this.citiesManager.whichSphere(this.state.latitude),\r\n    //   northernMost: this.citiesManager.getMostNorthern().latitude,\r\n    //   southernMost: this.citiesManager.getMostSouthern().latitude,\r\n    //   totalPopulation: this.citiesManager.getPopulation(),\r\n    // })\r\n    // console.log(this.citiesManager.whichSphere());\r\n  };\r\n\r\n  renderCards = () => {\r\n    return this.citiesManager.cities.map(cityEach => {\r\n      console.log(cityEach.key);\r\n      return (\r\n        <CitiesCard\r\n          key={cityEach.key}\r\n          // key={cityEach.name}\r\n          city={cityEach}\r\n          calculate={this.calculate}\r\n          removeCity={this.handleDelete}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h2> My Cities </h2>\r\n        <div id=\"idPanelContainer\">\r\n          <div id=\"idLeftPanel\" className=\"leftPanel\">\r\n            Cities Manager\r\n            <input\r\n              id=\"input1\"\r\n              type=\"text\"\r\n              placeholder=\"Add a City Name\"\r\n              name=\"nameInput\"\r\n              value={this.state.nameInput}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <input\r\n              id=\"input2\"\r\n              type=\"number\"\r\n              placeholder=\"Add latitude\"\r\n              name=\"latitude\"\r\n              value={this.state.latitude}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <input\r\n              id=\"input3\"\r\n              type=\"number\"\r\n              placeholder=\"Add longitude\"\r\n              name=\"longitude\"\r\n              value={this.state.longitude}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <input\r\n              id=\"input4\"\r\n              type=\"number\"\r\n              placeholder=\"Add population\"\r\n              name=\"population\"\r\n              value={this.state.population}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <button\r\n              className=\"addBalance\"\r\n              id=\"idAddBalance\"\r\n              onClick={this.handleCreateNewCity}\r\n            >\r\n              Create New City\r\n            </button>\r\n            {/* <h2> Account List </h2> */}\r\n            {this.renderCards()}\r\n          </div>\r\n\r\n          <div id=\"idRightPanel\" className=\"rightPanel\">\r\n            {\" \"}\r\n            City Statistics\r\n            <h3 id=\"display\">\r\n              Which sphere is the city in? : {this.state.whichSphere}\r\n            </h3>\r\n            <h3 id=\"display\">\r\n              The northern most city is: {this.state.northernMost}\r\n            </h3>\r\n            <h3 id=\"display\">\r\n              The southern most city is: {this.state.southernMost}\r\n            </h3>\r\n            <h3 id=\"display\">\r\n              The total population of all cities is:{\" \"}\r\n              {this.state.totalPopulation}\r\n            </h3>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cities;\r\n"]},"metadata":{},"sourceType":"module"}